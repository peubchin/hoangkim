<?phpif (!defined('BASEPATH')) {    exit('No direct script access allowed');}include_once APPPATH . '/modules/layout/controllers/Layout.php';class Rows extends Layout {    private $_path = '';    private $_module_slug = 'shops/items';    //private $_shops_size = '336x410';    private $_shops_size = NULL;    private $_tag = 'shop';	private $_allowed_field = array('status', 'inhome', 'is_featured', 'is_new', 'is_bestseller', 'is_promotion', 'is_bestview', 'is_wholesale');    function __construct() {        parent::__construct();        $this->load->library('form_validation');        $this->_data['breadcrumbs_module_name'] = 'Sản phẩm';        $this->_data['module_slug'] = $this->_module_slug;        $this->_path = get_module_path('shops');        $this->_shops_size = $this->config->item('shops_sizes');        $shops_sizes = $this->config->item('shops_sizes');        $this->_data['shops_size'] = $shops_sizes['thumb'];    }	function admin_ajax_change_field() {		if (!$this->input->is_ajax_request()) {			exit('No direct script access allowed');		}		$post = $this->input->post();		if (!empty($post)) {			$value = $this->input->post('value');			$id = $this->input->post('id');			$field = $this->input->post('field');			$massage_success = $this->input->post('massage_success');			$massage_warning = $this->input->post('massage_warning');			$data = array(				$field => $value,			);			if (!in_array($field, $this->_allowed_field)) {				$notify_type = 'danger';				$notify_content = 'Trường này không tồn tại!';			} else if ($this->M_shops_rows->update($id, $data)) {				if ($value == 1) {					$notify_type = 'success';					$notify_content = $massage_success;				} else {					$notify_type = 'warning';					$notify_content = $massage_warning;				}			} else {				$notify_type = 'danger';				$notify_content = 'Dữ liệu chưa lưu!';			}			$this->set_notify_admin($notify_type, $notify_content);			$this->load->view('layout/notify-ajax', NULL);		} else {			redirect(base_url());		}	}	function gets_item_field($field = '', $number = 3) {		if ((trim($field) == '') || !in_array($field, $this->_allowed_field)) {			return null;		}		$args = $this->default_args();        $args['is_wholesale'] = 0;		$args[$field] = 1;		if ($number > 0) {			$rows = $this->M_shops_rows->gets($args, $number, 0);		} else {			$rows = $this->M_shops_rows->gets($args);		}		return $rows;	}    function ajax_get() {        if (!$this->input->is_ajax_request()) {            exit('No direct script access allowed');        }        $message = array();        $message['status'] = 'warning';        $message['content'] = null;        $message['message'] = 'Kiểm tra thông tin';        $post = $this->input->post();        if (!empty($post)) {            $id = $this->input->post('id');            $data = $this->M_shops_rows->get($id);            if (is_array($data) && !empty($data)) {                $data['promotion_price'] = get_promotion_price($data['product_price'], $data['product_sales_price']);                // if($id == 733){                //     $data['VAT'] = 'VAT8';                // }elseif($id == 730){                //     $data['VAT'] = 'VAT10';                // }                $data['VAT_percent'] = get_VAT_percent_product($data['VAT']);                $data['price_before_tax'] = round(get_price_before_tax($data['promotion_price'], $data['VAT_percent']));                $data['VAT_value'] = round($data['promotion_price'] - $data['price_before_tax']);                $message['status'] = 'success';                $message['content'] = $data;                $message['message'] = 'Tải dữ liệu thành công!';            } else {                $message['status'] = 'danger';                $message['content'] = null;                $message['message'] = 'Có lỗi xảy ra! Vui lòng kiểm tra lại!';            }        }        echo json_encode($message);        exit();    }    function default_args() {        $order_by = array(			'order' => 'DESC',			'title' => 'ASC',            'addtime' => 'DESC',            'edittime' => 'DESC',        );        $args = array();        $args['order_by'] = $order_by;        return $args;    }    function counts($options = array()) {        $default_args = $this->default_args();        if (is_array($options) && !empty($options)) {            $args = array_merge($default_args, $options);        } else {            $args = $default_args;        }        return $this->M_shops_rows->counts($args);    }    function get($id, $alias = '') {		$row = $this->M_shops_rows->get($id, $alias);		if (!empty($row) && isset($row['id'])) {			$row['options'] = $this->get_options($row['id']);		}		return $row;	}    function gets($options = array()) {        $default_args = $this->default_args();        if (is_array($options) && !empty($options)) {            $args = array_merge($default_args, $options);        } else {            $args = $default_args;        }        return $this->M_shops_rows->gets($args);    }	function get_options($id = 0) {		return modules::run('shops/other/gets', array('product' => $id, 'is_temp' => 0));	}    function get_max_order() {        $args = $this->default_args();        $order_by = array(            'order' => 'DESC'        );        $args['order_by'] = $order_by;        $perpage = 1;        $offset = 0;        $rows = $this->M_shops_rows->gets($args, $perpage, $offset);        $max_order = isset($rows[0]['order']) ? $rows[0]['order'] : 0;        return (int) $max_order;    }    function re_order() {        $args = $this->default_args();        $order_by = array(            'order' => 'ASC'        );        $args['order_by'] = $order_by;        $rows = $this->M_shops_rows->gets($args);        if (!empty($rows)) {            $i = 0;            foreach ($rows as $value) {                $i++;                $data = array(                    'order' => $i                );                $this->M_shops_rows->update($value['id'], $data);            }        }    }	function site_commission() {		$this->_initialize();		modules::run('users/require_logged_in');		$this->output->cache(true);		$this->_data['user_id'] = $user_id = $this->_data['userid'];        $pay_in = modules::run('users/users_commission/get_total_value', array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('PAY_IN')        ));        $this->_data['total_pay_in'] = abs($pay_in);		$withdrawal = modules::run('users/users_commission/get_total_value', array(			'user_id' => $user_id,			'status' => 1,			'in_action' => array('WITHDRAWAL')		));		$this->_data['total_withdrawal'] = abs($withdrawal);        $withdrawal_fee = modules::run('users/users_commission/get_total_value', array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('WITHDRAWAL_FEE')        ));        $this->_data['total_withdrawal_fee'] = abs($withdrawal_fee);		$total_commission_buy = modules::run('users/users_commission/get_total_value', array(			'user_id' => $user_id,			'status' => 1,			'in_action' => array('SUB_BUY', 'SUB_BUY_ROOT')		));		$this->_data['total_commission_buy'] = $total_commission_buy;        $total_sub_buy = modules::run('users/users_commission/get_total_value', array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('SUB_BUY')        ));        $this->_data['total_sub_buy'] = $total_sub_buy;        $total_sub_buy_root = modules::run('users/users_commission/get_total_value', array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('SUB_BUY_ROOT')        ));        $this->_data['total_sub_buy_root'] = $total_sub_buy_root;		/*$total_buy = modules::run('users/users_commission/get_total_value', array(			'user_id' => $user_id,			'status' => 1,			'in_action' => array('BUY')		));        $this->_data['total_buy'] = abs($total_buy);*/        $date = '25-10-2021';		$this->_data['total_buy'] = get_accumulated_user($user_id, $date);        $total_buy_credit_card =  modules::run('users/users_commission/get_total_value', array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('BUY'),            'payment' => 'CREDIT_CARD',        ));        $this->_data['total_buy_credit_card'] = abs($total_buy_credit_card);		$this->_data['total_revenue'] = get_balance_user($user_id);        $user = modules::run('users/get', $user_id);        $this->_data['stock'] = isset($user['stock']) ? $user['stock'] : 0;        $this->_data['stock_official'] = isset($user['stock_official']) ? $user['stock_official'] : 0;        $this->_data['dividend'] = isset($user['dividend']) ? $user['dividend'] : 0;        $date = '01-08-2021';        /*$start_date_start = get_start_date($date);        // $total_buy_connect = modules::run('users/users_commission/get_total_value', array(        $total_buy_connect = $this->M_users_commission->get_total(array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('BUY'),            'start_date_start' => $start_date_start        ));        $this->_data['total_buy_connect'] = abs($total_buy_connect);*/        $this->_data['total_buy_connect'] = get_accumulated_user($user_id, $date);        // echo abs($total_buy_connect); die;        $date = '25-10-2021';        /*$start_date_start = get_start_date($date);        // echo date('d/m/Y H:i:s', $start_date_start); die;        $total_buy_current = modules::run('users/users_commission/get_total_value', array(        // $total_buy_current = $this->M_users_commission->get_total(array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('BUY'),            'start_date_start' => $start_date_start        ));        $this->_data['total_buy_current'] = abs($total_buy_current);*/        $this->_data['total_buy_current'] = get_accumulated_user($user_id, $date);        //tính thưởng thêm theo doanh số        $month_calculator = 'this';        // $month_calculator = 'last';        $time = time();        $month_start = strtotime('first day of ' . $month_calculator . ' month', $time);        $month_end = strtotime('last day of ' . $month_calculator . ' month', $time);        // echo date('Y-m-d', $month_start);        // echo "<br>" . date('Y-m-d', $month_end);        // die;        $options = array();        $options['start_date_start'] = get_start_date(date('Y-m-d', $month_start));        $options['start_date_end'] = get_end_date(date('Y-m-d', $month_end));        $total_revenue_bonus = 0;        $total_accumulated_F1 = 0;        $users_F1 = $this->M_users->gets_F1($user_id);        // var_dump($users_F1); die;        if(is_array($users_F1) && !empty($users_F1)){            foreach ($users_F1 as $user_F1) {                $accumulated_F1 = get_accumulated_commission_user_id($user_F1['userid'], $options);                if($accumulated_F1 >= 2000000){                    $total_accumulated_F1 += $accumulated_F1;                }            }        }        if($total_accumulated_F1 > 0){            $percent = 10;            $total_revenue_bonus = $total_accumulated_F1 * $percent / 100;        }        $this->_data['total_accumulated_F1'] = $total_accumulated_F1;        $this->_data['total_revenue_bonus'] = $total_revenue_bonus;        $this->_data['total_current_revenue_bonus'] = get_current_revenue_bonus_user($user_id);		$this->_breadcrumbs[] = array(			'url' => current_url(),			'name' => 'Ví cá nhân',		);		$this->set_breadcrumbs();		$this->_data['title_seo'] = 'Ví cá nhân - ' . $this->_data['title_seo'];		$this->_data['main_content'] = 'layout/site/pages/user-commission';		$this->load->view('layout/site/layout', $this->_data);	}	function site_withdrawal() {		$this->_initialize();		modules::run('users/require_logged_in');		$this->output->cache(true);		$user_id = $this->_data['userid'];		$user = modules::run('users/get', $user_id);        if(!(is_array($user) || !empty($user))){            redirect(site_url('dang-nhap'));        }        $this->_data['user'] = $user;        $this->_plugins_script[] = array(            'folder' => 'jquery-validation',            'name' => 'jquery.validate'        );        $this->_plugins_script[] = array(            'folder' => 'jquery-validation/localization',            'name' => 'messages_vi'        );        $this->_plugins_script[] = array(            'folder' => 'jquery-mask',            'name' => 'jquery.mask'        );        $this->set_plugins();        $this->_modules_script[] = array(            'folder' => 'users',            'name' => 'withdrawal-validate'        );        $this->set_modules();		$post = $this->input->post();        if (!empty($post)) {            $this->form_validation->set_error_delimiters('<p class="required">', '</p>');;            $this->form_validation->set_rules('amount', 'Số tiền rút', 'trim|required');            if ($this->form_validation->run($this)) {                $amount = filter_var($this->input->post('amount'), FILTER_SANITIZE_NUMBER_FLOAT);                $fee_percent = 10;                // $fee = $amount * $fee_percent / 100;				$fee = 0;				$total = $amount + $fee;                $balance = get_balance_user($user_id);                // if($user_id == 1877){                //     //$balance = 500000;                // }                $args_pending = array();                $args_pending['user_id'] = $user_id;                $args_pending['in_action'] = array('WITHDRAWAL');                $args_pending['status'] = 0;                $counts_pending = $this->M_users_commission->counts($args_pending);                if($amount % 1000 != 0){                    $notify_type = 'danger';                    $notify_content = 'Rút tiền không hợp lệ! Vui lòng thực hiện lại!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());                }elseif($amount < WITHDRAWAL_MIN){                    $notify_type = 'danger';                    $notify_content = 'Giới hạn rút ví tối thiểu là ' . get_money_VND(WITHDRAWAL_MIN) . '/lần!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());                }elseif($counts_pending > 0){                    $notify_type = 'danger';                    $notify_content = 'Bạn có yêu cầu rút tiền đang xử lý! Vui lòng chờ chúng tôi hoàn tất yêu cầu đó và thực hiện lại giao dịch!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());                }elseif($balance < $total){                    $notify_type = 'danger';                    $notify_content = 'Số dư tài khoản không đủ điều kiện thực hiện giao dịch!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());                /*}elseif($user['account_holder'] == '' || $user['account_number'] == '' || $user['branch_bank'] == ''){                    $notify_type = 'danger';                    $notify_content = 'Thông tin ngân hàng chưa đủ điều kiện thực hiện giao dịch!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());*/                }else{                    // if($user_id == 1){                    //     echo 'OK admin: ' . formatRice($balance); die;                    // }                	$time = time();                    $payment = 'CREDIT_CARD';                    $action = 'WITHDRAWAL';                    $value_cost = $amount;                    $percent = 0;                    $value = $amount;                    $data_commission = array(                        'order_id' => NULL,                        'user_id' => $user_id,                        'extend_by' => $user['banker_id'],                        'action' => $action,                        'payment' => $payment,                        'value_cost' => $value_cost,                        'percent' => $percent,                        'value' => $value,                        'message' => 'Thành viên rút tiền từ tài khoản',                        'status' => 0,                        'created' => $time                    );                    $commission_id = $this->M_users_commission->add($data_commission);                    if($commission_id != 0){                        /*                    	$action = 'WITHDRAWAL_FEE';						$value_cost = (-1) * $amount;						$percent = $fee_percent;						$value = (-1) * $fee;						$data_commission_fee = array(							'order_id' => NULL,							'user_id' => $user_id,							'extend_by' => $commission_id,							'action' => $action,							'payment' => $payment,							'value_cost' => $value_cost,							'percent' => $percent,							'value' => $value,							'message' => 'Thuế thu nhập cá nhân',							'status' => 0,                            'created' => $time						);						$this->M_users_commission->add($data_commission_fee);                        */                        $full_name = isset($user['full_name']) ? $user['full_name'] : '';                        $site_name = $this->_data['site_name'];                        $receiver_email = $this->_data['email'];                        $emails = explode(',', $receiver_email);                        $site_email = get_first_element(array_map('trim', $emails));                        $sender_email = $site_email;                        $sender_name = $site_name;                        $data_commission['id'] = $commission_id;                        $data_commission['phone'] = isset($user['phone']) ? $user['phone'] : '';                        $data_commission['email'] = isset($user['email']) ? $user['email'] : '';                        $data_commission['full_name'] = $full_name;                        $partial = array();                        $partial['data'] = $data_commission;                        $data_sendmail = array(                            'sender_email' => $site_email,                            'sender_name' => $sender_name . ' - ' . $site_email,                            'receiver_email' => $receiver_email, //mail nhan thư                            'subject' => 'Yêu cầu rút tiền - ' . $site_name,                            'message' => $this->load->view('layout/site/partial/html-template-withdrawal', $partial, true)                        );                        modules::run('emails/send_mail', $data_sendmail);                        $notify_type = 'success';                        $notify_content = 'Rút tiền thành công! Vui lòng chờ xác nhận!';                    } else {                        $notify_type = 'danger';                        $notify_content = 'Chưa rút được tiền! Vui lòng thực hiện lại!';                    }                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());                }            }        }        $this->_data['banker'] = modules::run('banker/gets');		$this->_breadcrumbs[] = array(			'url' => site_url('rut-tien'),			'name' => 'Rút tiền',		);		$this->set_breadcrumbs();		$this->_data['title_seo'] = 'Rút tiền - ' . $this->_data['title_seo'];		$this->_data['main_content'] = 'layout/site/pages/user-withdrawal';		$this->load->view('layout/site/layout', $this->_data);	}    function site_pay_in() {        $this->_initialize();        modules::run('users/require_logged_in');        $this->output->cache(true);        $user_id = $this->_data['userid'];        $user = modules::run('users/get', $user_id);        if(!(is_array($user) || !empty($user))){            redirect(site_url('dang-nhap'));        }        $this->_data['user'] = $user;        $this->_plugins_script[] = array(            'folder' => 'jquery-validation',            'name' => 'jquery.validate'        );        $this->_plugins_script[] = array(            'folder' => 'jquery-validation/localization',            'name' => 'messages_vi'        );        $this->_plugins_script[] = array(            'folder' => 'jquery-mask',            'name' => 'jquery.mask'        );        $this->set_plugins();        $this->_modules_script[] = array(            'folder' => 'users',            'name' => 'pay-in-validate'        );        $this->set_modules();        $post = $this->input->post();        if (!empty($post)) {            $this->form_validation->set_error_delimiters('<p class="required">', '</p>');;            $this->form_validation->set_rules('amount', 'Nhập số tiền cần nạp', 'trim|required');            if ($this->form_validation->run($this)) {                $amount = filter_var($this->input->post('amount'), FILTER_SANITIZE_NUMBER_FLOAT);                if(($amount < 0) || ($amount % CASH_DRAWING_MULTIPLES != 0)){                    $notify_type = 'danger';                    $notify_content = 'Nạp tiền không hợp lệ! Vui lòng thực hiện lại!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());                }else{                    $action = 'PAY_IN';                    $value_cost = $amount;                    $percent = 0;                    $value = $amount;                    $data_commission = array(                        'order_id' => NULL,                        'user_id' => $user_id,                        'extend_by' => NULL,                        'action' => $action,                        'value_cost' => $value_cost,                        'percent' => $percent,                        'value' => $value,                        'message' => 'Thành viên nạp tiền vào tài khoản',                        'status' => 0,                        'created' => time()                    );                    $commission_id = $this->M_users_commission->add($data_commission);                    if($commission_id != 0){                        $full_name = isset($user['full_name']) ? $user['full_name'] : '';                        $site_name = $this->_data['site_name'];                        $receiver_email = $this->_data['email'];                        $emails = explode(',', $receiver_email);                        $site_email = get_first_element(array_map('trim', $emails));                        $sender_email = $site_email;                        $sender_name = $site_name;                        $data_commission['id'] = $commission_id;                        $data_commission['phone'] = isset($user['phone']) ? $user['phone'] : '';                        $data_commission['email'] = isset($user['email']) ? $user['email'] : '';                        $data_commission['full_name'] = $full_name;                        $partial = array();                        $partial['data'] = $data_commission;                        $data_sendmail = array(                            'sender_email' => $site_email,                            'sender_name' => $sender_name . ' - ' . $site_email,                            'receiver_email' => $receiver_email, //mail nhan thư                            'subject' => 'Yêu cầu nạp tiền - ' . $site_name,                            'message' => $this->load->view('layout/site/partial/html-template-pay-in', $partial, true)                        );                        modules::run('emails/send_mail', $data_sendmail);                        $notify_type = 'success';                        $notify_content = 'Yêu cầu nạp tiền thành công! Vui lòng chờ xác nhận!';                    } else {                        $notify_type = 'danger';                        $notify_content = 'Chưa yêu cầu nạp tiền! Vui lòng thực hiện lại!';                    }                    $this->set_notify($notify_type, $notify_content);                    redirect(current_url());                }            }        }        $this->_breadcrumbs[] = array(            'url' => site_url('nap-tien'),            'name' => 'Nạp tiền',        );        $this->set_breadcrumbs();        $this->_data['title_seo'] = 'Nạp tiền - ' . $this->_data['title_seo'];        $this->_data['main_content'] = 'layout/site/pages/user-pay-in';        $this->load->view('layout/site/layout', $this->_data);    }    function site_transfer() {        $this->_initialize();        modules::run('users/require_logged_in');        $this->output->cache(true);        $user_id = $this->_data['userid'];        $user = modules::run('users/get', $user_id);        if(!(is_array($user) || !empty($user))){            redirect(site_url('dang-nhap'));        }        $this->_data['user'] = $user;        $this->_plugins_script[] = array(            'folder' => 'jquery-validation',            'name' => 'jquery.validate'        );        $this->_plugins_script[] = array(            'folder' => 'jquery-validation/localization',            'name' => 'messages_vi'        );        $this->_plugins_script[] = array(            'folder' => 'jquery-mask',            'name' => 'jquery.mask'        );        $this->set_plugins();        $this->_modules_script[] = array(            'folder' => 'users',            'name' => 'transfer-validate'        );        $this->set_modules();        $post = $this->input->post();        if (!empty($post)) {            $this->form_validation->set_error_delimiters('<p class="required">', '</p>');;            $this->form_validation->set_rules('to_user_id', 'Người nhận', 'trim|required');            $this->form_validation->set_rules('amount', 'Số tiền cần chuyển', 'trim|required');            if ($this->form_validation->run($this)) {                $from_user_id = $user_id;                $to_user_id = (int) $this->input->post('to_user_id');                $note = $this->input->post('note');                if(trim($note) != ''){                    $note = " ($note)";                }                $payment = 'CREDIT_CARD';                $amount = filter_var($this->input->post('amount'), FILTER_SANITIZE_NUMBER_FLOAT);                if(($amount < 0) || ($amount % CASH_DRAWING_MULTIPLES != 0)){                    $notify_type = 'danger';                    $notify_content = 'Chuyển tiền không hợp lệ! Vui lòng thực hiện lại!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_full_url());                }                $balance = get_balance_user($user_id);                if($balance < $amount){                    $notify_type = 'danger';                    $notify_content = 'Số dư tài khoản không đủ điều kiện thực hiện giao dịch!';                    $this->set_notify($notify_type, $notify_content);                    redirect(current_full_url());                }                $time = time();                $action = 'TRANSFER';                $value_cost = (-1) * $amount;                $percent = 0;                $value = (-1) * $amount;                $data_commission = array(                    'order_id' => NULL,                    'user_id' => $from_user_id,                    'extend_by' => NULL,                    'action' => $action,                    'payment' => $payment,                    'value_cost' => $value_cost,                    'percent' => $percent,                    'value' => $value,                    'message' => 'Thành viên chuyển tiền cho thành viên khác' . $note,                    'status' => 1,                    'created' => $time,                    'verified' => $time,                    'verify_by' => $from_user_id                );                $commission_id_transfer = $this->M_users_commission->add($data_commission);                $action = 'TRANSFERED';                $value_cost = $amount;                $percent = 0;                $value = $amount;                $data_commission = array(                    'order_id' => NULL,                    'user_id' => $to_user_id,                    'extend_by' => NULL,                    'action' => $action,                    'payment' => $payment,                    'value_cost' => $value_cost,                    'percent' => $percent,                    'value' => $value,                    'message' => 'Thành viên nhận tiền từ thành viên khác chuyển' . $note,                    'status' => 1,                    'created' => $time,                    'verified' => $time,                    'verify_by' => $from_user_id                );                $commission_id_transfered = $this->M_users_commission->add($data_commission);                if($commission_id_transfer != 0 && $commission_id_transfered != 0){                    $full_name = isset($user['full_name']) ? $user['full_name'] : '';                    $site_name = $this->_data['site_name'];                    $receiver_email = $this->_data['email'];                    $emails = explode(',', $receiver_email);                    $site_email = get_first_element(array_map('trim', $emails));                    $sender_email = $site_email;                    $sender_name = $site_name;                    $data_commission['id'] = $commission_id;                    $data_commission['phone'] = isset($user['phone']) ? $user['phone'] : '';                    $data_commission['email'] = isset($user['email']) ? $user['email'] : '';                    $data_commission['full_name'] = $full_name;                    $partial = array();                    $partial['data'] = $data_commission;                    $data_sendmail = array(                        'sender_email' => $site_email,                        'sender_name' => $sender_name . ' - ' . $site_email,                        'receiver_email' => $receiver_email, //mail nhan thư                        'subject' => 'Chuyển tiền - ' . $site_name,                        'message' => $this->load->view('layout/site/partial/html-template-transfer', $partial, true)                    );                    modules::run('emails/send_mail', $data_sendmail);                    $notify_type = 'success';                    $notify_content = 'Chuyển tiền thành công!';                } else {                    $notify_type = 'danger';                    $notify_content = 'Có lỗi xảy ra! Vui lòng thực hiện lại!';                }                $this->set_notify($notify_type, $notify_content);                redirect(current_full_url());            }        }        $this->_data['users'] = modules::run('users/gets', array('role' => 'AGENCY', 'not_in_id' => array($user_id)));        $this->_breadcrumbs[] = array(            'url' => current_full_url(),            'name' => 'Chuyển tiền',        );        $this->set_breadcrumbs();        $this->_data['title_seo'] = 'Chuyển tiền - ' . $this->_data['title_seo'];        $this->_data['main_content'] = 'layout/site/pages/user-transfer';        $this->load->view('layout/site/layout', $this->_data);    }    function check_product_code_availablity() {        $this->load->model('shops/m_shops_rows', 'M_shops_rows');        $post = $this->input->post();        $this->_message_success = 'Bạn có thể sử dụng mã này!';        $this->_message_danger = 'Mã này đã tồn tại!';        if (!empty($post)) {            if ($this->input->post('ajax') == '1') {                $product_code = $this->input->post('product_code');                if ($this->M_shops_rows->check_product_code_availablity($product_code)) {                    $this->_status = "success";                    $this->_message = $this->_message_success;                } else {                    $this->_status = "danger";                    $this->_message = $this->_message_danger;                }                $this->set_json_encode();                $this->load->view('layout/json_data', $this->_data);            } else {                $product_code = $this->input->post('product_code');                if ($this->M_shops_rows->check_product_code_availablity($product_code)) {                    return TRUE;                } else {                    return FALSE;                }            }        } else {            redirect(base_url());        }    }    function get_all_data() {        return $this->M_shops_rows->gets(array());    }    function get_products_bestsellers($limit = 3) {        $rows = $this->M_shops_order_details->get_best_seller($limit);        $result = array();        foreach ($rows as $value) {            $arr = array();            $arr = $this->get($value['product_id']);            $result[] = $arr;        }        return $result;    }    function get_top_4_rows($number = 4) {        $order_by = array(            'addtime' => 'DESC'        );        $args['order_by'] = $order_by;        return $this->M_shops_rows->gets($args, $number, 0);    }    function get_view_most($number = 4) {        $order_by = array(            'hitstotal' => 'DESC'        );        $args['order_by'] = $order_by;        return $this->M_shops_rows->gets($args, $number, 0);    }    function get_items_is_featured($limit = 8) {        $args = $this->default_args();        $args['is_featured'] = 1;        $args['status'] = 1;		if($limit > 0){			$rows = $this->M_shops_rows->gets($args, $limit, 0);		}else{			$rows = $this->M_shops_rows->gets($args);		}        return $rows;    }    function site_details() {		$this->_initialize();		        $uri = explode("-", ($this->uri->segment(3) == '') ? '' : $this->uri->segment(3));        if (count($uri) <= 1) {            show_404();        }        $id = (int) end($uri);        array_pop($uri);        $alias = implode("-", $uri);        if ($id == 0 || $alias == '') {            show_404();        }        $row = $this->get($id);        if(!(is_array($row) && !empty($row))){            show_404();        }        $is_wholesale = isset($row['is_wholesale']) ? filter_var($row['is_wholesale'], FILTER_VALIDATE_BOOLEAN) : FALSE;        if($is_wholesale){            $user_is_wholesale = check_current_user_is_wholesale();            if(!$user_is_wholesale){                // show_404();                redirect(site_url('san-pham'));            }            // if($this->input->get('debug')){            //     var_dump($user_is_wholesale); die;            // }        }        $title_seo = trim($row['title_seo']) != '' ? $row['title_seo'] : $row['title'];        $keywords = $row['keywords'];        $description = $row['description'];        $other_seo = $row['other_seo'];        if (trim($title_seo) != '') {            $this->_data['title_seo'] = $title_seo . ' - ' . $this->_data['title_seo'];        }        if (trim($keywords) != '') {            $this->_data['keywords'] = $keywords;        }        if (trim($description) != '') {            $this->_data['description'] = $description;        }        if (trim($other_seo) != '') {            $this->_data['other_seo'] = $other_seo;        }        $comments = modules::run('comments/gets', array('product_id' => $row['id'], 'status' => 1), true);        $comments_stars = array(            1 => 0,            2 => 0,            3 => 0,            4 => 0,            5 => 0        );        $comments_total = $comments_average = 0;        if(is_array($comments) && !empty($comments)){            $stars = array_column($comments, 'val');            $arr_stars = array_count_values($stars);            foreach($comments_stars as $stars_key => $stars_value){                if(isset($arr_stars[$stars_key])){                    $comments_stars[$stars_key] = $arr_stars[$stars_key];                }            }            $comments_total = array_sum($comments_stars);            if($comments_total != 0){                $comments_average = round(array_sum($stars)/$comments_total, 0);            }        }        $partial = array();        $partial['data'] = $comments;        $row['comments'] = $this->load->view('layout/site/partial/comment_item', $partial, true);        $partial = array();        $partial['data'] = $comments_stars;        $row['comments_stars'] = $this->load->view('layout/site/partial/comment_star', $partial, true);        $partial = array();        $partial['row']['comments_total'] = $comments_total;        $partial['row']['comments_average'] = $comments_average;        $row['comments_statistics'] = $this->load->view('layout/site/partial/comment_statistics', $partial, true);        //$row['comments_total'] = $comments_total;        //$row['comments_average'] = $comments_average;        $this->_breadcrumbs[] = array(            'url' => site_url($this->config->item('url_shops_rows')),            'name' => 'Sản phẩm'        );        $this->_breadcrumbs[] = array(            'url' => site_url($this->config->item('url_shops_cat') . '/' . $row['cat_alias']),            'name' => $row['cat_name']        );        $this->_breadcrumbs[] = array(            'url' => site_url($this->config->item('url_shops_rows') . '/' . $row['cat_alias'] . '/' . $row['alias'] . '-' . $row['id']),            'name' => $row['title']        );        $this->set_breadcrumbs();        //tags        $tags = modules::run('tags/tags_relationship/get_data_by_object_id', $row['id'], $this->_tag);        $row['tags'] = array_column($tags, 'name', 'alias');        $this->_data['h1_seo'] = $row['h1_seo'];        $hitstotal = (int) $row['hitstotal'] + 1;        $this->site_update_view($row['id'], $hitstotal);        $this->_data['row'] = $row;        $rows = $this->M_shops_rows->gets(array(            'cat_id' => $row['listcatid'],            'not_in_id' => $row['id'],            'status' => 1,        ), 12, 0);        //render partial        $partial = array();        $partial['data'] = $rows;        $this->_data['related_products'] = $this->load->view('layout/site/partial/product_related', $partial, true);        /*		$this->_add_js[] = 'custom-single-shop';        $this->add_js();		*/        $this->_data['main_content'] = 'layout/site/pages/single-shop';        $this->load->view('layout/site/layout', $this->_data);    }    function index() {		$this->_initialize();		        $this->output->cache(true);        $args = $this->default_args();        $args['status'] = 1;        $args['is_wholesale'] = 0;        $total = $this->counts($args);        $perpage = 12; //$this->config->item('per_page') ? $this->config->item('per_page') : 8;        $segment = 2;        $this->load->library('pagination');        $config['total_rows'] = $total;        $config['per_page'] = $perpage;        $config['full_tag_open'] = '<ul class="pagination">';        $config['full_tag_close'] = '</ul>';        $config['first_link'] = '&larr;';        $config['first_tag_open'] = '<li class="prev page">';        $config['first_tag_close'] = '</li>';        $config['last_link'] = '&rarr;';        $config['last_tag_open'] = '<li class="next page">';        $config['last_tag_close'] = '</li>';        $config['next_link'] = '&raquo;';        $config['next_tag_open'] = '<li class="next page">';        $config['next_tag_close'] = '</li>';        $config['prev_link'] = '&laquo;';        $config['prev_tag_open'] = '<li class="prev page">';        $config['prev_tag_close'] = '</li>';        $config['cur_tag_open'] = '<li class="active"><a href="">';        $config['cur_tag_close'] = '</a></li>';        $config['num_tag_open'] = '<li class="page">';        $config['num_tag_close'] = '</li>';        $config['base_url'] = base_url('san-pham');        $config['uri_segment'] = $segment;        $this->pagination->initialize($config);        $pagination = $this->pagination->create_links();        $offset = ($this->uri->segment($segment) == '') ? 0 : $this->uri->segment($segment);        $rows = $this->M_shops_rows->gets($args, $perpage, $offset);        $this->_data['pagination'] = $pagination;        $partial = array();        $partial['data'] = null;        if (is_array($rows) && !empty($rows)) {            foreach ($rows as $value) {                $partial['data'][] = $this->get($value['id'], $value['alias']);            }        }        $this->_data['rows'] = $this->load->view('layout/site/partial/product-item', $partial, true);        $this->_breadcrumbs[] = array(            'url' => site_url($this->config->item('url_shops_rows')),            'name' => 'Sản phẩm'        );        $this->set_breadcrumbs();        $this->_data['title_seo'] = 'Sản phẩm' . ' - ' . $this->_data['title_seo'];        $this->_data['main_content'] = 'layout/site/pages/shops';        $this->load->view('layout/site/layout', $this->_data);    }    function site_search() {		$this->_initialize();        $get = $this->input->get();        if (!isset($get['search_param']) || !isset($get['q']) || trim($get['q']) == '' || !isset($get['price'])) {            //redirect(base_url());        }        $this->_data['get'] = $get;        $args = $this->default_args();        $args['status'] = 1;        $args['is_wholesale'] = 0;        if (isset($get['price']) && trim($get['price']) != '') {            $arr_price = explode('-', trim($get['price']));            if(isset($arr_price[0]) && isset($arr_price[1])){                $price_start = (float)$arr_price[0];                $price_end = (float)$arr_price[1];                if($price_start != 0 && $price_end != 0){                    $args['price_start'] = $price_start;                    $args['price_end'] = $price_end;                }elseif($price_end != 0){                    $args['price_end'] = $price_end;                }elseif($price_start != 0){                    $args['price_start'] = $price_start;                }else{                    redirect(base_url());                }            }else{                redirect(base_url());            }        }        if (isset($get['q']) && trim($get['q']) != '') {            $args['q'] = $get['q'];        }		if (isset($get['search_param']) && $get['search_param'] != 'all') {			$args['in_cat_id'] = (int) $get['search_param'];		}        // echo "<pre>";        // print_r($args);        // echo "</pre>";        // die();        $total = $this->counts($args);        $perpage = 12; //$this->config->item('per_page') ? $this->config->item('per_page') : 10;        $segment = 2;        $this->load->library('pagination');        $config['total_rows'] = $total;        $config['per_page'] = $perpage;        $config['full_tag_open'] = '<ul class="pagination">';        $config['full_tag_close'] = '</ul>';        $config['first_link'] = '&larr;';        $config['first_tag_open'] = '<li class="prev page">';        $config['first_tag_close'] = '</li>';        $config['last_link'] = '&rarr;';        $config['last_tag_open'] = '<li class="next page">';        $config['last_tag_close'] = '</li>';        $config['next_link'] = '&raquo;';        $config['next_tag_open'] = '<li class="next page">';        $config['next_tag_close'] = '</li>';        $config['prev_link'] = '&laquo;';        $config['prev_tag_open'] = '<li class="prev page">';        $config['prev_tag_close'] = '</li>';        $config['cur_tag_open'] = '<li class="active"><a href="">';        $config['cur_tag_close'] = '</a></li>';        $config['num_tag_open'] = '<li class="page">';        $config['num_tag_close'] = '</li>';        $config['base_url'] = base_url('search');        $config['suffix'] = '?' . http_build_query($get, '', "&");        $config['first_url'] = site_url('search') . '?' . http_build_query($get, '', "&");        $config['uri_segment'] = $segment;        $this->pagination->initialize($config);        $pagination = $this->pagination->create_links();        $offset = ($this->uri->segment($segment) == '') ? 0 : $this->uri->segment($segment);        $rows = $this->M_shops_rows->gets($args, $perpage, $offset);        $this->_data['pagination'] = $pagination;        $partial = array();        $partial['data'] = $rows;        $this->_data['rows'] = $this->load->view('layout/site/partial/product-item', $partial, true);				$this->_breadcrumbs[] = array(            'url' => current_url(),            'name' => 'Tìm kiếm'        );        $this->set_breadcrumbs();        $this->_data['title_seo'] = 'Kết quả tìm kiếm' . ' - ' . $this->_data['title_seo'];        $this->_data['main_content'] = 'layout/site/pages/search-shop';        $this->load->view('layout/site/layout', $this->_data);    }    function counts_all() {        return $this->counts(array());    }    function site_items_in_tags() {		$this->_initialize();		        $segment = 2;        $uri = explode("-", ($this->uri->segment($segment) == '') ? '' : $this->uri->segment($segment));        if (count($uri) <= 1) {            show_404();        }        $id = (int) end($uri);        array_pop($uri);        $alias = implode("-", $uri);        if ($id == 0 || $alias == '') {            show_404();        }        $row = modules::run('tags/get', $id);        if (empty($row)) {            show_404();        }        $data = modules::run('tags/tag_targets/get_by_tag_type', $id, $this->_tag_type_id);        $in_id = array(0);        if (empty($data)) {            show_404();        } else {            foreach ($data as $value) {                $in_id[] = $value['value'];            }        }        $this->output->cache(true);        $this->_data['title_seo'] = 'Kết quả  cho từ khóa: ' . $row['tag_name'] . ' - ' . $this->_data['title_seo'];        $args = $this->default_args();        $args['status'] = 1;        $args['in_id'] = $in_id;        $args['is_wholesale'] = 0;        $total = $this->counts($args);        $perpage = $this->config->item('per_page') ? $this->config->item('per_page') : 10;        $this->load->library('pagination');        $config['total_rows'] = $total;        $config['per_page'] = $perpage;        $config['full_tag_open'] = '<ul class="pagination">';        $config['full_tag_close'] = '</ul>';        $config['first_link'] = '&laquo;';        $config['first_tag_open'] = '<li class="prev page">';        $config['first_tag_close'] = '</li>';        $config['last_link'] = '&raquo;';        $config['last_tag_open'] = '<li class="next page">';        $config['last_tag_close'] = '</li>';        $config['next_link'] = '&rarr;';        $config['next_tag_open'] = '<li class="next page">';        $config['next_tag_close'] = '</li>';        $config['prev_link'] = '&larr;';        $config['prev_tag_open'] = '<li class="prev page">';        $config['prev_tag_close'] = '</li>';        $config['cur_tag_open'] = '<li class="active"><a href="">';        $config['cur_tag_close'] = '</a></li>';        $config['num_tag_open'] = '<li class="page">';        $config['num_tag_close'] = '</li>';        $segment = 3;        $config['base_url'] = base_url('tags/' . $row['tag_slug'] . '-' . $id);        $config['uri_segment'] = $segment;        $config['first_url'] = site_url('tags/' . $row['tag_slug'] . '-' . $id);        $this->pagination->initialize($config);        $pagination = $this->pagination->create_links();        $offset = ($this->uri->segment($segment) == '') ? 0 : $this->uri->segment($segment);        $rows = $this->M_shops_rows->gets($args, $perpage, $offset);        $this->_data['rows'] = $rows;        $this->_data['pagination'] = $pagination;        $partial = array();        $partial['data'] = null;        if (!empty($rows)) {            foreach ($rows as $value) {                $partial['data'][] = $this->get($value['id'], $value['alias']);            }        }        $this->_data['products'] = $this->load->view('layout/site/partial/product', $partial, true);        $this->_breadcrumbs[] = array(            'url' => $config['first_url'],            'name' => $row['tag_name']        );        $this->set_breadcrumbs();        $this->_data['main_content'] = 'layout/site/pages/tags-shops';        $this->load->view('layout/site/layout', $this->_data);    }    function site_items_in_listcatid() {		$this->_initialize();		        $segment = 2;        $cat_alias = ($this->uri->segment($segment) == '') ? '' : $this->uri->segment($segment);        if (trim($cat_alias) == '') {            show_404();        }        $data = modules::run('shops/cat/get_in_alias', $cat_alias);        if (empty($data)) {            show_404();        }        $this->output->cache(true);        $cat_id = $data['id'];        $in_cat_id[] = $cat_id;        $cat = modules::run('shops/cat/gets');        $in_cat_id = array_merge($in_cat_id, get_children($cat_id, $cat['data_list'], $cat['data_input']));        $title_seo = trim($data['title_seo']) != '' ? $data['title_seo'] : $data['name'];        $keywords = $data['keywords'];        $description = $data['description'];        $other_seo = $data['other_seo'];        if (trim($title_seo) != '') {            $this->_data['title_seo'] = $title_seo . ' - ' . $this->_data['title_seo'];        }        if (trim($keywords) != '') {            $this->_data['keywords'] = $keywords;        }        if (trim($description) != '') {            $this->_data['description'] = $description;        }        if (trim($other_seo) != '') {            $this->_data['other_seo'] = $other_seo;        }        $args = $this->default_args();        $args['status'] = 1;        $args['in_cat_id'] = $in_cat_id;        $args['is_wholesale'] = 0;        $total = $this->counts($args);        $perpage = 12; //$this->config->item('per_page') ? $this->config->item('per_page') : 10;        $this->load->library('pagination');        $config['total_rows'] = $total;        $config['per_page'] = $perpage;        $config['full_tag_open'] = '<ul class="pagination">';        $config['full_tag_close'] = '</ul>';        $config['first_link'] = '&larr;';        $config['first_tag_open'] = '<li class="prev page">';        $config['first_tag_close'] = '</li>';        $config['last_link'] = '&rarr;';        $config['last_tag_open'] = '<li class="next page">';        $config['last_tag_close'] = '</li>';        $config['next_link'] = '&raquo;';        $config['next_tag_open'] = '<li class="next page">';        $config['next_tag_close'] = '</li>';        $config['prev_link'] = '&laquo;';        $config['prev_tag_open'] = '<li class="prev page">';        $config['prev_tag_close'] = '</li>';        $config['cur_tag_open'] = '<li class="active"><a href="">';        $config['cur_tag_close'] = '</a></li>';        $config['num_tag_open'] = '<li class="page">';        $config['num_tag_close'] = '</li>';        $segment++;        $config['base_url'] = base_url($this->config->item('url_shops_cat') . '/' . $cat_alias);        $config['uri_segment'] = $segment;        $config['first_url'] = site_url($this->config->item('url_shops_cat') . '/' . $cat_alias);        $this->pagination->initialize($config);        $pagination = $this->pagination->create_links();        $offset = ($this->uri->segment($segment) == '') ? 0 : $this->uri->segment($segment);        $rows = $this->M_shops_rows->gets($args, $perpage, $offset);        $this->_data['pagination'] = $pagination;        $partial = array();        $partial['data'] = null;        if (!empty($rows)) {            foreach ($rows as $value) {                $partial['data'][] = $this->get($value['id'], $value['alias']);            }        }        $this->_data['rows'] = $this->load->view('layout/site/partial/product', $partial, true);        $cat_title = $data['name'];        $this->_data['row'] = $data;        $this->_breadcrumbs[] = array(            'url' => site_url($this->config->item('url_shops_rows')),            'name' => 'Sản phẩm'        );        $this->_breadcrumbs[] = array(            'url' => $config['first_url'],            'name' => $cat_title        );        $this->set_breadcrumbs();        $this->_data['main_content'] = 'layout/site/pages/cat-shops';        $this->load->view('layout/site/layout', $this->_data);    }    function get_items_in_cat_id($cat_id = 0, $limit = 8) {        $in_cat_id[] = $cat_id;        $cat = modules::run('shops/cat/gets');        $in_cat_id = array_merge($in_cat_id, get_children($cat_id, $cat['data_list'], $cat['data_input']));        $args = $this->default_args();        $args['in_cat_id'] = $in_cat_id;        if ($limit > 0) {            $rows = $this->M_shops_rows->gets($args, $limit, 0);        } else {            $rows = $this->M_shops_rows->gets($args);        }        return $rows;    }    function admin_index() {		$this->_initialize_admin();        $this->redirect_admin();        $this->_plugins_css_admin[] = array(            'folder' => 'bootstrap3-dialog/css',            'name' => 'bootstrap-dialog'        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap3-dialog/js',            'name' => 'bootstrap-dialog'        );        $this->set_plugins_admin();        $this->_init_fancybox();        $this->_modules_script[] = array(            'folder' => 'shops',            'name' => 'admin-items'        );        $this->set_modules();        $get = $this->input->get();        $this->_data['get'] = $get;        $args = $this->default_args();		$order_by = array(			'order' => 'DESC',			'title' => 'ASC',            'addtime' => 'DESC',            'edittime' => 'DESC',        );        $args['order_by'] = $order_by;        $shops_cat = modules::run('shops/cat/gets');        $this->_data['shops_cat'] = $shops_cat;		if (isset($get['catid']) && ($get['catid'] != 0)) {			            $catid = $get['catid'];            $listcatid[] = (int) $catid;            $listcatid = array_merge($listcatid, get_children($catid, $shops_cat['data_list'], $shops_cat['data_input']));            $args['in_cat_id'] = $listcatid;        }        if (isset($get['q']) && trim($get['q']) != '') {            $args['q'] = $get['q'];        }        $total = $this->counts($args);        $perpage = isset($get['per_page']) ? $get['per_page'] : $this->config->item('per_page');        $segment = 4;        $this->load->library('pagination');        $config['total_rows'] = $total;        $config['per_page'] = $perpage;        $config['full_tag_open'] = '<ul class="pagination no-margin pull-right">';        $config['full_tag_close'] = '</ul>';        $config['first_link'] = '&laquo;';        $config['first_tag_open'] = '<li class="prev page">';        $config['first_tag_close'] = '</li>';        $config['last_link'] = '&raquo;';        $config['last_tag_open'] = '<li class="next page">';        $config['last_tag_close'] = '</li>';        $config['next_link'] = 'Trang trước &rarr;';        $config['next_tag_open'] = '<li class="next page">';        $config['next_tag_close'] = '</li>';        $config['prev_link'] = '&larr; Trang sau';        $config['prev_tag_open'] = '<li class="prev page">';        $config['prev_tag_close'] = '</li>';        $config['cur_tag_open'] = '<li class="active"><a href="">';        $config['cur_tag_close'] = '</a></li>';        $config['num_tag_open'] = '<li class="page">';        $config['num_tag_close'] = '</li>';        if (!empty($get)) {            $config['base_url'] = get_admin_url($this->_module_slug);            $config['suffix'] = '?' . http_build_query($get, '', "&");            $config['first_url'] = get_admin_url($this->_module_slug . '?' . http_build_query($get, '', "&"));            $config['uri_segment'] = $segment;        } else {            $config['base_url'] = get_admin_url($this->_module_slug);            $config['uri_segment'] = $segment;        }        $this->pagination->initialize($config);        $pagination = $this->pagination->create_links();        $offset = ($this->uri->segment($segment) == '') ? 0 : $this->uri->segment($segment);        $rows = $this->M_shops_rows->gets($args, $perpage, $offset);        $this->_data['rows'] = $rows;        $this->_data['pagination'] = $pagination;        $this->_data['current_page'] = base64_encode(current_full_url());              $this->_data['title'] = 'Danh sách sản phẩm - ' . $this->_data['title'];        $this->_data['main_content'] = 'shops/admin/view_page_index';        $this->load->view('layout/admin/view_layout', $this->_data);    }    function admin_report_by_products() {        $this->_initialize_admin();        $this->redirect_admin();        $this->_module_slug = 'report/products';        $this->_data['module_slug'] = $this->_module_slug;        $this->_plugins_css_admin[] = array(            'folder' => 'chart/dist',            'name' => 'Chart.min'        );        $this->_plugins_script_admin[] = array(            'folder' => 'chart/dist',            'name' => 'Chart.min'        );         $this->_plugins_script_admin[] = array(            'folder' => 'chart',            'name' => 'utils'        );        $this->_plugins_css_admin[] = array(            'folder' => 'bootstrap3-dialog/css',            'name' => 'bootstrap-dialog',        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap3-dialog/js',            'name' => 'bootstrap-dialog',        );        $this->_plugins_css_admin[] = array(            'folder' => 'bootstrap-datepicker/css',            'name' => 'bootstrap-datepicker',        );        $this->_plugins_css_admin[] = array(            'folder' => 'bootstrap-datepicker/css',            'name' => 'bootstrap-datepicker3',        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap-datepicker/js',            'name' => 'bootstrap-datepicker',        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap-datepicker/locales',            'name' => 'bootstrap-datepicker.vi.min',        );        $this->set_plugins_admin();        $this->_modules_script[] = array(            'folder' => 'revenue',            'name' => 'admin-report',        );        $this->set_modules();        $get = $this->input->get();        $this->_data['get'] = $get;        // $data = $this->M_shops_order_details->gets(array(        //     'group_by' => array('product_id'),        //     'transaction_status' => 1,        //     'not_product' => 0        // ));        // debug_arr($data, true);        // die;        $args = $this->default_args();        if (isset($get['q']) && trim($get['q']) != '') {            $args['q'] = $get['q'];        }        if (isset($get['year']) && isset($get['month']) != '') {            $year = isset($get['year']) ? trim($get['year']) : '';            $month = isset($get['month']) ? (int) $get['month'] : 0;            if($year != '' && $month != 0){                $month_start = strtotime('first day of this month', strtotime("01-" . $month . "-" . $year));                $month_end = strtotime('last day of this month', strtotime("01-" . $month . "-" . $year));                $start_date_start = get_start_date(date('Y-m-d', $month_start));                $start_date_end = get_end_date(date('Y-m-d', $month_end));                // echo date('H:i:s d/m/Y', $start_date_start);                // echo "<br/>" . date('H:i:s d/m/Y', $start_date_end);                // die;                $args['start_date_start'] = $start_date_start;                $args['start_date_end'] = $start_date_end;                //cấu hình biểu đồ                $this->load->helper('date');                $days_in_month = days_in_month($month, $year);                // echo $days_in_month; die;                $labels = array();                $dataset_data = array();                $args_month = $args;                for ($day = 1; $day <= $days_in_month; $day++) {                    if($day < 10){                        $day = '0' . $day;                    }                    $name = 'Ngày ' . $day;                    $labels[] = $name;                    $time = $year . "-" . $month . "-" . $day;                    $date_start = get_start_date($time);                    $date_end = get_end_date($time);                    // echo date('H:i:s d/m/Y', $date_start);                    // echo "<br/>" . date('H:i:s d/m/Y', $date_end);                    // echo "<br/>--------------------------------------------------<br/>";                    // die;                    $args_month['start_date_start'] = $date_start;                    $args_month['start_date_end'] = $date_end;                    $balance = $this->M_revenue->get_total($args_month); //doanh thu từng ngày trong tháng                    $dataset_data[] = $balance;                }                $dataset = array(                    'label' => number_format_normal(array_sum($dataset_data)) . ' VNĐ',                    'backgroundColor' => 'rgb(54, 162, 235)',                    'borderColor' => 'rgb(54, 162, 235)',                    'data' => $dataset_data,                    'fill' => false,                );                $datasets = array($dataset);                $my_chart_data = array(                    'labels' => $labels,                    'datasets' => $datasets,                );                $my_chart_config = array(                    'type' => 'line',                    'data' => $my_chart_data,                    'options' => array(                        /*                        //Ẩn label                        'legend' => array(                            'display' => false,                        ),                        */                        'responsive' => true,                        'title' => array(                            'display' => true,                            'text' => 'Thống kê doanh thu theo tháng ' . $month . ' năm ' . $year,                        ),                        'tooltips' => array(                            'mode' => 'index',                            'intersect' => false,                        ),                        'hover' => array(                            'mode' => 'nearest',                            'intersect' => true                        ),                        'scales' => array(                            'yAxes' => array(array(                                'display' => true,                                'scaleLabel' => array(                                    'display' => true,                                    'labelString' => 'VNĐ'                                )                            ))                        )                    )                );                $this->_data['my_chart_config'] = $my_chart_config;            }        }        // echo "<pre>";        // print_r($args);        // echo "</pre>";        // die();        $total = $this->counts($args);        $perpage = isset($get['per_page']) ? $get['per_page'] : $this->config->item('per_page');        $segment = 4;        $this->load->library('pagination');        $config['total_rows'] = $total;        $config['per_page'] = $perpage;        $config['full_tag_open'] = '<ul class="pagination no-margin pull-right">';        $config['full_tag_close'] = '</ul>';        $config['first_link'] = '&laquo;';        $config['first_tag_open'] = '<li class="prev page">';        $config['first_tag_close'] = '</li>';        $config['last_link'] = '&raquo;';        $config['last_tag_open'] = '<li class="next page">';        $config['last_tag_close'] = '</li>';        $config['next_link'] = 'Trang trước &rarr;';        $config['next_tag_open'] = '<li class="next page">';        $config['next_tag_close'] = '</li>';        $config['prev_link'] = '&larr; Trang sau';        $config['prev_tag_open'] = '<li class="prev page">';        $config['prev_tag_close'] = '</li>';        $config['cur_tag_open'] = '<li class="active"><a href="">';        $config['cur_tag_close'] = '</a></li>';        $config['num_tag_open'] = '<li class="page">';        $config['num_tag_close'] = '</li>';        if (!empty($get)) {            $config['base_url'] = get_admin_url($this->_module_slug);            $config['suffix'] = '?' . http_build_query($get, '', "&");            $config['first_url'] = get_admin_url($this->_module_slug . '?' . http_build_query($get, '', "&"));            $config['uri_segment'] = $segment;        } else {            $config['base_url'] = get_admin_url($this->_module_slug);            $config['uri_segment'] = $segment;        }        $this->pagination->initialize($config);        $pagination = $this->pagination->create_links();        $this->_data['pagination'] = $pagination;        $offset = ($this->uri->segment($segment) == '') ? 0 : $this->uri->segment($segment);        $rows = $this->M_shops_rows->gets($args, $perpage, $offset);        $this->_data['rows'] = $rows;        $total_revenue = $this->M_shops_order_details->gets_total_revenue(array(            'transaction_status' => 1,            'not_product' => 0        ));//doanh thu        $this->_data['total_revenue'] = $total_revenue;        $this->_data['title'] = 'Báo cáo theo sản phẩm - ' . $this->_data['title'];        $this->_data['main_content'] = 'shops/admin/view_page_report_by_products';        $this->load->view('layout/admin/view_layout', $this->_data);    }    function admin_add() {        $data = array(            'listcatid' => $this->input->post('catid'),            'VAT' => $this->input->post('VAT'),            'user_id' => $this->_data['userid'],            'addtime' => time(),            'edittime' => 0,            'status' => $this->input->post('status') ? 1 : 0,            'is_wholesale' => $this->input->post('is_wholesale') ? 1 : 0,            'is_bestseller' => $this->input->post('is_bestseller') ? 1 : 0,			'is_promotion' => $this->input->post('is_promotion') ? 1 : 0,			'is_bestview' => $this->input->post('is_bestview') ? 1 : 0,            'is_featured' => $this->input->post('is_featured') ? 1 : 0,            'is_new' => $this->input->post('is_new') ? 1 : 0,            'inhome' => $this->input->post('inhome') ? 1 : 0,            'title' => $this->input->post('title'),            'alias' => $this->input->post('alias'),            'title_seo' => $this->input->post('title_seo'),            'description' => $this->input->post('description'),            'keywords' => $this->input->post('keywords'),            'other_seo' => $this->input->post('other_seo'),            'h1_seo' => $this->input->post('h1_seo'),            'homeimgalt' => $this->input->post('homeimgalt'),            'hometext' => $this->input->post('hometext'),            'bodyhtml' => $this->input->post('bodyhtml'),            'stock_status' => $this->input->post('stock_status'),            'product_code' => $this->input->post('product_code'),            'product_price' => filter_var($this->input->post('product_price'), FILTER_SANITIZE_NUMBER_INT),			'product_discount_percent' => filter_var($this->input->post('product_discount_percent'), FILTER_SANITIZE_NUMBER_FLOAT),            'product_sales_price' => filter_var($this->input->post('product_sales_price'), FILTER_SANITIZE_NUMBER_INT),            'product_cost_price' => filter_var($this->input->post('product_cost_price'), FILTER_SANITIZE_NUMBER_INT),            'product_accumulated_price' => filter_var($this->input->post('product_accumulated_price'), FILTER_SANITIZE_NUMBER_INT),            'F0' => $this->input->post('F0'),            'F1' => $this->input->post('F1'),            'F2' => $this->input->post('F2'),            'F3' => $this->input->post('F3'),            'F4' => $this->input->post('F4'),            'F5' => $this->input->post('F5'),            'F6' => $this->input->post('F6'),            'F7' => $this->input->post('F7'),            'F8' => $this->input->post('F8'),            'F9' => $this->input->post('F9'),            'F10' => $this->input->post('F10'),            'order' => $this->get_max_order() + 1        );        return $this->M_shops_rows->add($data);    }    function site_update_view($id = 0, $view) {        $data = array('hitstotal' => $view);        return $this->M_shops_rows->update($id, $data);    }    function admin_update($id) {        $data = array(            'listcatid' => $this->input->post('catid'),            'VAT' => $this->input->post('VAT'),            'edittime' => time(),            'status' => $this->input->post('status') ? 1 : 0,			'is_wholesale' => $this->input->post('is_wholesale') ? 1 : 0,            'is_bestseller' => $this->input->post('is_bestseller') ? 1 : 0,			'is_promotion' => $this->input->post('is_promotion') ? 1 : 0,			'is_bestview' => $this->input->post('is_bestview') ? 1 : 0,            'is_featured' => $this->input->post('is_featured') ? 1 : 0,            'is_new' => $this->input->post('is_new') ? 1 : 0,            'inhome' => $this->input->post('inhome') ? 1 : 0,            'title' => $this->input->post('title'),            'alias' => $this->input->post('alias'),            'title_seo' => $this->input->post('title_seo'),            'description' => $this->input->post('description'),            'keywords' => $this->input->post('keywords'),            'other_seo' => $this->input->post('other_seo'),            'h1_seo' => $this->input->post('h1_seo'),            'homeimgalt' => $this->input->post('homeimgalt'),            'hometext' => $this->input->post('hometext'),            'bodyhtml' => $this->input->post('bodyhtml'),            'stock_status' => $this->input->post('stock_status'),            'product_code' => $this->input->post('product_code'),            'product_price' => filter_var($this->input->post('product_price'), FILTER_SANITIZE_NUMBER_INT),			'product_discount_percent' => filter_var($this->input->post('product_discount_percent'), FILTER_SANITIZE_NUMBER_FLOAT),            'product_sales_price' => filter_var($this->input->post('product_sales_price'), FILTER_SANITIZE_NUMBER_INT),            'product_cost_price' => filter_var($this->input->post('product_cost_price'), FILTER_SANITIZE_NUMBER_INT),            'product_accumulated_price' => filter_var($this->input->post('product_accumulated_price'), FILTER_SANITIZE_NUMBER_INT),            'F0' => $this->input->post('F0'),            'F1' => $this->input->post('F1'),            'F2' => $this->input->post('F2'),            'F3' => $this->input->post('F3'),            'F4' => $this->input->post('F4'),            'F5' => $this->input->post('F5'),            'F6' => $this->input->post('F6'),            'F7' => $this->input->post('F7'),            'F8' => $this->input->post('F8'),            'F9' => $this->input->post('F9'),            'F10' => $this->input->post('F10'),        );        return $this->M_shops_rows->update($id, $data);    }    function admin_delete() {		$this->_initialize_admin();        $this->redirect_admin();        $this->_message_success = 'Đã xóa sản phẩm!';        $this->_message_warning = 'Sản phẩm này không tồn tại!';		$id = $this->input->get('id');		if ($id != 0) {			$row = $this->get($id);			if ($this->M_shops_rows->delete($id)) {				@unlink(FCPATH . $this->_path . $row['homeimgfile']);								if (isset($row['options']) && is_array($row['options']) && !empty($row['options'])){					foreach ($row['options'] as $value){						@unlink(FCPATH . $this->_path . $value['image']);					}					modules::run('shops/other/delete', array('product' => $id));				}								//sap xep lai				$this->re_order();				modules::run('tags/delete', 'shops', $id);				$notify_type = 'success';				$notify_content = $this->_message_success;			} else {				$notify_type = 'danger';				$notify_content = $this->_message_danger;			}		} else {			$notify_type = 'warning';			$notify_content = $this->_message_warning;		}		$this->set_notify_admin($notify_type, $notify_content);		redirect(get_admin_url($this->_module_slug));    }    function admin_main() {		$this->_initialize_admin();        $this->redirect_admin();        $post = $this->input->post();        if (!empty($post)) {            $action = $this->input->post('action');            if ($action == 'delete') {                $this->_message_success = 'Đã xóa các sản phẩm được chọn!';                $this->_message_warning = 'Bạn chưa chọn sản phẩm nào!';                $ids = $this->input->post('idcheck');                if (is_array($ids) && !empty($ids)) {                    foreach ($ids as $id) {						$row = $this->get($id);						if ($this->M_shops_rows->delete($id)) {							@unlink(FCPATH . $this->_path . $row['homeimgfile']);														if (isset($row['options']) && is_array($row['options']) && !empty($row['options'])){								foreach ($row['options'] as $value){									@unlink(FCPATH . $this->_path . $value['image']);								}								modules::run('shops/other/delete', array('product' => $id));							}                            modules::run('tags/delete', 'shops', $id);                            $notify_type = 'success';                            $notify_content = $this->_message_success;                        } else {                            $notify_type = 'danger';                            $notify_content = $this->_message_danger;                        }                    }                    //sap xep lai                    $this->re_order();                } else {                    $notify_type = 'warning';                    $notify_content = $this->_message_warning;                }                $this->set_notify_admin($notify_type, $notify_content);                redirect(get_admin_url($this->_module_slug));            } elseif ($action == 'content') {                redirect(get_admin_url('shops/content'));            } elseif ($action == 'update') {                $this->_message_success = 'Đã cập nhật sản phẩm!';                $this->_message_warning = 'Không có sản phẩm nào để cập nhật!';                $ids = $this->input->post('ids');                $orders = $this->input->post('order');                $count = count($orders);                if (!empty($ids) && !empty($orders)) {                    for ($i = 0; $i < $count; $i++) {                        $data = array(                            'order' => $orders[$i]                        );                        $id = $ids[$i];                        if ($this->M_shops_rows->update($id, $data)) {                            $notify_type = 'success';                            $notify_content = $this->_message_success;                            $this->output->clearCache();                        } else {                            $notify_type = 'danger';                            $notify_content = $this->_message_danger;                        }                    }                } else {                    $notify_type = 'warning';                    $notify_content = $this->_message_warning;                }                $this->set_notify_admin($notify_type, $notify_content);                redirect(get_admin_url($this->_module_slug));            }        } else {            redirect(get_admin_url($this->_module_slug));        }    }    function admin_content() {        $this->_initialize_admin();        $this->redirect_admin();        $this->_plugins_script_admin[] = array(            'folder' => 'jquery-validation',            'name' => 'jquery.validate'        );        $this->_plugins_script_admin[] = array(            'folder' => 'jquery-validation/localization',            'name' => 'messages_vi'        );        $this->_plugins_css_admin[] = array(            'folder' => 'tagmanager',            'name' => 'tagmanager'        );        $this->_plugins_script_admin[] = array(            'folder' => 'tagmanager',            'name' => 'tagmanager'        );        $this->_plugins_script_admin[] = array(            'folder' => 'jquery-mask',            'name' => 'jquery.mask'        );        $this->_plugins_css_admin[] = array(            'folder' => 'bootstrap-fileinput/css',            'name' => 'fileinput'        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap-fileinput/js',            'name' => 'fileinput.min'        );        $this->set_plugins_admin();        $this->_modules_script[] = array(            'folder' => 'shops',            'name' => 'admin-content-validate'        );        $this->set_modules();        $this->_data['current_page'] = $this->input->get('current_page');        $post = $this->input->post();        if (!empty($post)) {            $this->load->helper('language');            $this->lang->load('form_validation', 'vietnamese');            $this->lang->load('cat', 'vietnamese');            $this->form_validation->set_error_delimiters('<span class="help-block">', '</span>');            $this->form_validation->set_rules('title', 'Tên sản phẩm', 'trim|required');            $this->form_validation->set_rules('alias', 'Liên kết tĩnh', 'trim|required');            if ($this->form_validation->run($this)) {                if ($this->input->post('id')) {//update                    $current_page = base64_decode($this->input->post('current_page'));                    $err = FALSE;                    $id = $this->input->post('id');                    if (!$this->admin_update($id)) {                        $err = TRUE;                    } else {                        //upload images                        $this->_upload_images($id, 'homeimg');						$this->_upload_images_options($id);                        //tags                        $tags_value = $this->input->post('hidden-tags');                        $arr_tags = explode(',', $tags_value);                        if (is_array($arr_tags) && !empty($arr_tags)) {                            $tags = modules::run('tags/tags_relationship/get_data_by_object_id', $id, $this->_tag);                            $tags_id = array_column($tags, 'tag_id');                            modules::run('tags/admin_delete', $tags_id);                            modules::run('tags/tags_relationship/admin_delete_by_object_id', $id, $this->_tag);                            foreach ($arr_tags as $value) {                                $data_tags = array(                                    'name' => $value,                                    'alias' => strtolower(url_title(alias($value)))                                );                                $tag_id = modules::run('tags/admin_add', $data_tags);                                //tags relationship                                $data_tags_relationship = array(                                    'tag_id' => $tag_id,                                    'object_id' => $id,                                    'module' => $this->_tag                                );                                modules::run('tags/tags_relationship/admin_add', $data_tags_relationship);                            }                        }                    }                    if ($err === FALSE) {                        $this->output->clearCache();                        $notify_type = 'success';                        $notify_content = 'Cập nhật sản phẩm thành công!';                        $this->set_notify_admin($notify_type, $notify_content);                        redirect((trim($current_page) == '') ? get_admin_url($this->_module_slug) : $current_page);                    } else {                        $notify_type = 'danger';                        $notify_content = 'Có lỗi xảy ra!';                        $this->set_notify_admin($notify_type, $notify_content);                    }                } else {//add                                            $err = FALSE;                    $insert_id = $this->admin_add();                    if ($insert_id == 0) {                        $err = TRUE;                    } else {                        //upload images                        $this->_upload_images($insert_id, 'homeimg');						$this->_upload_images_options($insert_id);                        //tags                        $tags_value = $this->input->post('hidden-tags');                        $arr_tags = explode(',', $tags_value);                        if (is_array($arr_tags) && !empty($arr_tags)) {                            foreach ($arr_tags as $value) {                                $data_tags = array(                                    'name' => $value,                                    'alias' => strtolower(url_title(alias($value)))                                );                                $tag_id = modules::run('tags/admin_add', $data_tags);                                //tags relationship                                $data_tags_relationship = array(                                    'tag_id' => $tag_id,                                    'object_id' => $insert_id,                                    'module' => $this->_tag                                );                                modules::run('tags/tags_relationship/admin_add', $data_tags_relationship);                            }                        }                    }                    if ($err === FALSE) {                        $this->output->clearCache();                        $notify_type = 'success';                        $notify_content = 'Sản phẩm đã được thêm!';                        $this->set_notify_admin($notify_type, $notify_content);                        redirect(get_admin_url($this->_module_slug));                    } else {                        $notify_type = 'danger';                        $notify_content = 'Có lỗi xảy ra!';                        $this->set_notify_admin($notify_type, $notify_content);                    }                }            }        }        $this->load->library('ckeditor', array('instanceName' => 'CKEDITOR1', 'basePath' => base_url() . "ckeditor/", 'outPut' => true));        $title = 'Thêm sản phẩm - ' . $this->_data['breadcrumbs_module_name'] . ' - ' . $this->_data['title'];        $is_temp = modules::run('shops/other/gets', array('is_temp' => 1));		if(is_array($is_temp) && !empty($is_temp)){			foreach($is_temp as $value){				@unlink(FCPATH . $this->_path . $value['image']);			}			modules::run('shops/other/delete', array('is_temp' => 1));		}				$id = ($this->uri->segment(4) == '') ? 0 : $this->uri->segment(4);        if ($id != 0) {            $this->_data['current_page'] = $this->input->get('current_page');            $row = $this->get($id);            $tags = modules::run('tags/tags_relationship/get_data_by_object_id', $row['id'], $this->_tag);            $row['tags'] = implode(',', array_column($tags, 'name'));            $this->_data['row'] = $row;            $title = 'Cập nhật sản phẩm - ' . $this->_data['breadcrumbs_module_name'] . ' - ' . $this->_data['title'];        } else {                    }        $this->_data['shops_cat'] = modules::run('shops/cat/gets');        $this->_data['title'] = $title;        $this->_data['main_content'] = 'shops/admin/view_page_content';        $this->load->view('layout/admin/view_layout', $this->_data);    }    public function admin_get_price_ajax() {        $this->_data['order'] = (int) $this->input->post('order') + 1;        $this->_data['shops_unit'] = modules::run('shops/unit/gets');        $this->load->view('shops/admin/view_price', $this->_data);    }    public function ajax_get_items_in_catid() {        $catid = $this->input->post('catid');        $id = $this->input->post('id');        $row = $this->M_shops_rows->get($id);        $this->_data['row'] = $row;        $args = array();        $args['in_cat_id'] = $catid;        $this->_data['rows'] = $this->M_shops_rows->gets($args);        $this->load->view('shops/admin/view_related', $this->_data);    }    private function _upload_images($id, $input_name) {		$watermark_image = get_module_path('logo') . modules::run('configs/get_config_value', 'watermark_image');        $watermark_opacity = modules::run('configs/get_config_value', 'watermark_opacity');        $row = $this->get($id);        $info = modules::run('files/index', $input_name, $this->_path);        if (isset($info['uploads'])) {            $upload_images = $info['uploads']; // thông tin ảnh upload            if ($_FILES[$input_name]['size'] != 0) {                foreach ($upload_images as $value) {                    $file_name = $value['file_name']; //tên ảnh                    $data_images = array(                        'homeimgfile' => $file_name                    );                    $this->M_shops_rows->update($id, $data_images);					modules::run('files/watermark_overlay', './' . $this->_path . $file_name, './' . $watermark_image, array('wm_opacity' => $watermark_opacity));                }                @unlink(FCPATH . $this->_path . $row['homeimgfile']);            }        }    }			private function _upload_images_options($id) {		$option_ids = $this->input->post('option_id');		if(is_array($option_ids) && !empty($option_ids)){			modules::run('shops/other/update', array('in_id' => $option_ids), array(				'product' => $id,				'is_temp' => 0,				'edittime' => time(),			));		}	}	function ajax_upload() {		$name_input = 'files';		$dir = $this->_path;		$options = array();		$options['allowed_types'] = "gif|jpg|jpeg|png";		$this->_upload($name_input, $dir, $options);	}	function _upload($name_input = 'file', $dir = 'uploads/', $options = array()) {		if (!$this->input->is_ajax_request()) {            exit('No direct script access allowed');        }        $message = array();        $message['status'] = 'warning';        $message['content'] = null;        $message['message'] = 'Kiểm tra thông tin nhập';		$data_success = array();		$data_temp = array();		$data_error = array();        $watermark_image = get_module_path('logo') . modules::run('configs/get_config_value', 'watermark_image');        $watermark_opacity = modules::run('configs/get_config_value', 'watermark_opacity');		if (isset($_FILES[$name_input])) {			$product = filter_var($this->input->post('product'), FILTER_SANITIZE_NUMBER_INT);			$order = $this->input->post('order');            $number_of_files = sizeof($_FILES[$name_input]['tmp_name']);            $files = $_FILES[$name_input];			$this->load->library('upload');			$config['upload_path'] = FCPATH . $dir;			$config['max_size'] = '1024*10';			if (isset($options['allowed_types']) && trim($options['allowed_types']) != '') {				$config['allowed_types'] = $options['allowed_types'];			} else {				$config['allowed_types'] = '*'; //default			}			for ($i = 0; $i < $number_of_files; $i++) {				$_FILES[$name_input]['name'] = $files['name'][$i];				$_FILES[$name_input]['type'] = $files['type'][$i];				$_FILES[$name_input]['tmp_name'] = $files['tmp_name'][$i];				$_FILES[$name_input]['error'] = $files['error'][$i];				$_FILES[$name_input]['size'] = $files['size'][$i];				$name = alias(pathinfo($files['name'][$i], PATHINFO_FILENAME));				$config['file_name'] = $name;				$ext = pathinfo($files['name'][$i], PATHINFO_EXTENSION);				$this->upload->initialize($config);				$file_name = $name . '.' . $ext;				if ($this->upload->do_upload($name_input)) {					$data_success[] = $file_name;					$temp_id = modules::run('shops/other/add', array(						'product' => $product,						'image' => $file_name,						'alt' => '',						'order' => $order + $i + 1,						'is_temp' => 1,						'addtime' => time(),						'edittime' => 0,					));					$data_temp[] = modules::run('shops/other/get', array('id' => $temp_id));					modules::run('files/watermark_overlay', './' . $this->_path . $file_name, './' . $watermark_image, array('wm_opacity' => $watermark_opacity));				} else {					$data_error[] = strip_tags($file_name . " has error: " .$this->upload->display_errors());				}			}			$status = FALSE;			if(!empty($data_success)){				$message['content']['success'] = $this->load->view('admin/view_image', array('data' => $data_temp, 'order' => $order), TRUE);				$status = TRUE;			}			if(!empty($data_error)){				$message['content']['error'] = implode(', ', $data_error);				$status = TRUE;			}			if($status){				$message['status'] = 'success';				$message['message'] = 'Xử lý dữ liệu thành công!';			}        }        echo json_encode($message);		exit();	}    function get_data_old(){        die;        $rows = $this->M_shops_rows->gets_rows();        if(is_array($rows) && !empty($rows)){            foreach ($rows as $value) {                $data = array(                    'listcatid' => $value['listcatid'],                    'user_id' => $value['user_id'],                    'addtime' => time(),                    'edittime' => 0,                    'status' => 1,                    'is_bestseller' => $value['is_bestseller'],                    'is_promotion' => 0,                    'is_bestview' => 0,                    'is_featured' => $value['is_featured'],                    'is_new' => $value['is_new'],                    'inhome' => $value['inhome'],                    'title' => $value['title'],                    'alias' => $value['alias'],                    'title_seo' => $value['title_seo'],                    'description' => $value['description'],                    'keywords' => $value['keywords'],                    'other_seo' => $value['other_seo'],                    'h1_seo' => $value['h1_seo'],                    'homeimgfile' => $value['homeimgfile'],                    'homeimgalt' => $value['homeimgalt'],                    'hometext' => $value['hometext'],                    'bodyhtml' => $value['bodyhtml'],                    'stock_status' => '',                    'product_code' => $value['product_code'],                    'product_price' => $value['product_price'],                    'product_discount_percent' => $value['product_discounts_percent'],                    'product_sales_price' => $value['product_sales_price'],                    'order' => $this->get_max_order() + 1                );                $this->M_shops_rows->add($data);            }        }        echo "<pre>";        print_r($rows);        echo "</pre>";        die('Completed!');    }}/* End of file shops.php *//* Location: ./application/modules/shops/controllers/shops.php */