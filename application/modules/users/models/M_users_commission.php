<?phpclass M_users_commission extends CI_Model {	public $_table_name = 'users_commission';	function __construst() {		parent::__construst();	}    private function generate_select() {        $this->db->select($this->_table_name . '.*, ' . 'u.full_name as full_name, u.username as username, u.role as role, u.phone as phone, order.order_code, ctm.username as customer_username, ctm.full_name as customer_full_name, ctm.address as customer_address');    }    private function generate_from() {        $this->db->from($this->_table_name);        $this->db->join('users as u', 'u.userid = ' . $this->_table_name . '.user_id', 'left');        $this->db->join('shops_order as order', 'order.order_id = ' . $this->_table_name . '.order_id', 'left');        $this->db->join('users as ctm', 'ctm.userid = order.order_customer_id', 'left');    }	private function generate_where($args) {		if (isset($args['q'])) {            $this->db->group_start();            $this->db->like("u.full_name", $args['q']);            $this->db->or_like("u.username", $args['q']);            $this->db->or_like("u.phone", $args['q']);            $this->db->or_like("u.email", $args['q']);            $this->db->group_end();        }        if (isset($args['id'])) {            $this->db->where($this->_table_name . ".id", $args['id']);        }		if (isset($args['in_id'])) {            $this->db->where_in($this->_table_name . ".id", $args['in_id']);        }		if (isset($args['not_in_id'])) {            $this->db->where_not_in($this->_table_name . ".id", $args['not_in_id']);        }        if (isset($args['order_id'])) {            $this->db->where($this->_table_name . ".order_id", $args['order_id']);        }        if (isset($args['product_id'])) {            $this->db->where($this->_table_name . ".product_id", $args['product_id']);        }        if (isset($args['in_product_id'])) {            $this->db->where_in($this->_table_name . ".product_id", $args['in_product_id']);        }        if (isset($args['not_in_product_id'])) {            $this->db->where_not_in($this->_table_name . ".product_id", $args['not_in_product_id']);        }		if (isset($args['in_user_id'])) {            $this->db->where_in($this->_table_name . ".user_id", $args['in_user_id']);        }		if (isset($args['user_id'])) {            $this->db->where($this->_table_name . ".user_id", $args['user_id']);        }        if (isset($args['action'])) {            $this->db->where($this->_table_name . ".action", $args['action']);        }        if (isset($args['in_action'])) {            $this->db->where_in($this->_table_name . ".action", $args['in_action']);        }        if (isset($args['extend_by'])) {            $this->db->where($this->_table_name . ".extend_by", $args['extend_by']);        }        if (isset($args['payment'])) {            $this->db->where($this->_table_name . ".payment", $args['payment']);        }        if (isset($args['status'])) {            $this->db->where($this->_table_name . ".status", $args['status']);        }        if (isset($args['start_date_start']) && isset($args['start_date_end'])) {            $this->db->group_start();            $this->db->where($this->_table_name . ".created >=", $args['start_date_start']);            $this->db->where($this->_table_name . ".created <=", $args['start_date_end']);            $this->db->group_end();        }elseif (isset($args['start_date_start'])) {            $this->db->where($this->_table_name . ".created >=", $args['start_date_start']);        }elseif (isset($args['start_date_end'])) {            $this->db->where($this->_table_name . ".created <=", $args['start_date_end']);        }    }    private function generate_order_by($args) {        $allow_sort = array("DESC", "ASC", "RANDOM");        if (isset($args['order_by']) && is_array($args['order_by']) && !empty($args['order_by'])) {            foreach ($args['order_by'] as $key => $value) {                $sort = in_array($value, $allow_sort) ? $value : "DESC";                $this->db->order_by($this->_table_name . '.' . $key, $sort);            }        }    }    function gets($args, $perpage = 5, $offset = -1) {        $this->generate_select();        $this->generate_from();        $this->generate_where($args);        $this->generate_order_by($args);        if ($offset >= 0) {            $this->db->limit($perpage, $offset);        }        $query = $this->db->get();        // if (isset($args['start_date_start']) && isset($args['start_date_end'])) {        //     echo $this->db->last_query(); die;        // }        return $query->result_array();    }    function counts($args) {        $this->db->select($this->_table_name . '.id');        $this->generate_from();        $this->generate_where($args);        $query = $this->db->get();        return $query->num_rows();    }    function get($args) {        $this->generate_select();        $this->generate_from();        $this->generate_where($args);        $query = $this->db->get();        return $query->row_array();    }    function gets_F0_in_month($args = array()) {        // $this->db->select('DISTINCT(u.referred_by) as parent, p.userid as userid, p.username as username, p.full_name as full_name, p.role as role');        $this->db->select('DISTINCT(u.referred_by) as userid, p.username as username, p.full_name as full_name, p.phone as phone, p.role as role');        $this->db->from($this->_table_name);        $this->db->join('users as u', 'u.userid = ' . $this->_table_name . '.user_id', 'left');        $this->db->join('users as p', 'p.userid = u.referred_by', 'left');        $this->generate_where($args);        $this->db->order_by('u.referred_by', 'ASC');        $query = $this->db->get();        return $query->result_array();    }    function get_total_value($args) {        $this->db->select_sum('value');        $this->db->from($this->_table_name);        $this->generate_where($args);        $query = $this->db->get();        return $query->row_array();    }    function get_total($args) {        $this->db->select_sum('value');        $this->db->from($this->_table_name);        $this->generate_where($args);        $query = $this->db->get();        $row = $query->row_array();        /*if(isset($args['debug']) && $args['debug']){            debug_arr($row);        }*/        return isset($row['value']) ? $row['value'] : 0;    }    function get_accumulated($args) {        $this->db->select_sum('value_accumulated');        $this->db->from($this->_table_name);        $this->generate_where($args);        $query = $this->db->get();        $row = $query->row_array();        return isset($row['value_accumulated']) ? $row['value_accumulated'] : 0;    }    function get_value_real($args) {        $this->db->select_sum('value_real');        $this->db->from($this->_table_name);        $this->generate_where($args);        $query = $this->db->get();        $row = $query->row_array();        return isset($row['value_real']) ? $row['value_real'] : 0;    }    function _get_total_value($args) {        $this->db->select_sum('value');        $this->db->from($this->_table_name);        $this->generate_where($args);        $query = $this->db->get();        $row = $query->row_array();        return isset($row['value']) ? $row['value'] : 0;    }    function get_balance($user_id = 0, $args = array()) {        $plus_args = array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('PAY_IN', 'SUB_BUY', 'SUB_BUY_ROOT')        );        $minus_args = array(            'user_id' => $user_id,            'status' => 1,            'in_action' => array('WITHDRAWAL', 'WITHDRAWAL_FEE')        );        if(isset($args['date_start'])){            $plus_args['start_date_start'] = $args['date_start'];            $minus_args['start_date_start'] = $args['date_start'];        }        if(isset($args['date_end'])){            $plus_args['start_date_end'] = $args['date_end'];            $minus_args['start_date_end'] = $args['date_end'];        }        $plus = abs($this->get_total($plus_args));        $minus = abs($this->get_total($minus_args));        return $plus - $minus;    }    function add($data = array()) {        if (empty($data)) {            return 0;        }        $query = $this->db->insert($this->_table_name, $data);        $insert_id = $this->db->insert_id();        return isset($query) ? $insert_id : 0;    }    function update($args, $data) {        if (empty($args) || empty($data)) {            return false;        }        $this->generate_where($args);        $query = $this->db->update($this->_table_name, $data);        return isset($query) ? true : false;    }    function delete($args) {        if (empty($args)) {            return false;        }        $this->generate_where($args);        $query = $this->db->delete($this->_table_name);        return isset($query) ? true : false;    }}/* End of file M_users_commission.php *//* Location: ./application/modules/users/models/M_users_commission.php */